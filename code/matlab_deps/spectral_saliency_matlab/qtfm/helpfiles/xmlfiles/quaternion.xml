<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE function SYSTEM "qtfmfunction.dtd">
<function name = "quaternion" overload = "false">
<short>Quaternion constructor</short>
<syntax>q = quaternion(w, x, y, z)</syntax>
<long>
<para>
This function constructs quaternion (arrays) from components. It accepts
from zero to four arguments. The permissible cases are set out in the following
paragraphs.
</para>
<para>
Given no arguments, this function constructs an empty quaternion.
</para>
<para>
Given one argument which is already a quaternion, the function returns the
argument unchanged. If the argument is not a quaternion, the function
constructs a quaternion with the argument in the scalar part and supplies a
zero vector part of the same type as the argument. Thus if the argument is
a double, the resulting quaternion will have a vector part with double
zeros as components.
</para>
<para>
If two arguments are supplied, the first must be numeric, and the second
must be a pure quaternion of the same size. The result will be a full
quaternion. The first argument must have the same class as the components
of the second. This is to prevent the creation of quaternion arrays of mixed
class.
</para>
<para>
If three arguments are supplied, they must be numeric and of the same size
and class. The result is a pure quaternion.
</para>
<para>
If four arguments are supplied, they must be numeric and of the same size
and class. The result is a full quaternion.
</para>
</long>
<examples>
<precode>
>> quaternion()
 
ans = [] quaternion

>> quaternion(randn('single'), randv('single'))
 
ans = 0.7677 + 0.06019 * I + 0.8961 * J - 0.4397 * K
 
>> class(x(ans))

ans = single
 
>> quaternion(1, 2, 3)
 
ans = 1 * I + 2 * J + 3 * K
 
>> quaternion(1, 2, 3, 4)
 
ans = 1 + 2 * I + 3 * J + 4 * K

>> quaternion(randn(2))
 
ans = 2x2 quaternion array
</precode>
</examples>
</function>

<!--$Id: quaternion.xml,v 1.3 2010/03/22 20:42:04 sangwine Exp $-->
